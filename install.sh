#!/usr/bin/env bash

set -euo pipefail

LOG_FILE="/var/log/supabase_install.log"
MAX_LOG_SIZE=$((5 * 1024 * 1024))

rotate_logs() {
  if [ -f "$LOG_FILE" ]; then
    local size
    size=$(stat -c%s "$LOG_FILE")
    if [ "$size" -ge "$MAX_LOG_SIZE" ]; then
      mv "$LOG_FILE" "$LOG_FILE.old"
      touch "$LOG_FILE"
      echo "[INFO] Log rotated: $LOG_FILE.old" >> "$LOG_FILE"
    fi
  else
    touch "$LOG_FILE"
  fi
}

log() {
  local level=$1
  local message=$2
  local color_reset="\e[0m"
  local color=""
  case "$level" in
    INFO) color="\e[34m";;
    WARN) color="\e[33m";;
    ERROR) color="\e[31m";;
    SUCCESS) color="\e[32m";;
    *) color="";;
  esac
  local timestamp
  timestamp=$(date '+%Y-%m-%d %H:%M:%S')
  echo -e "${color}[$timestamp] [$level] $message${color_reset}"
  echo "[$timestamp] [$level] $message" >> "$LOG_FILE"
}

disable_ipv6() {
  log INFO "–û—Ç–∫–ª—é—á–∞–µ–º IPv6 –Ω–∞ –≤—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏..."
  sysctl -w net.ipv6.conf.all.disable_ipv6=1
  sysctl -w net.ipv6.conf.default.disable_ipv6=1
  sysctl -w net.ipv6.conf.lo.disable_ipv6=1
}

enable_ipv6() {
  log INFO "–í–∫–ª—é—á–∞–µ–º IPv6 –æ–±—Ä–∞—Ç–Ω–æ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏..."
  sysctl -w net.ipv6.conf.all.disable_ipv6=0
  sysctl -w net.ipv6.conf.default.disable_ipv6=0
  sysctl -w net.ipv6.conf.lo.disable_ipv6=0
}

rotate_logs

if [ "$EUID" -ne 0 ]; then
  log ERROR "–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å –ø—Ä–∞–≤–∞–º–∏ root –∏–ª–∏ —á–µ—Ä–µ–∑ sudo"
  exit 1
fi

disable_ipv6

log INFO "–ù–∞—á–∏–Ω–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É Supabase..."

read -rp "–í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä: supabase.example.com): " DOMAIN
read -rp "–í–≤–µ–¥–∏—Ç–µ email –¥–ª—è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: " EMAIL
read -rp "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –¥–ª—è Supabase Studio: " DASHBOARD_USERNAME
read -rsp "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è Supabase Studio –∏ nginx Basic Auth (—Å–∫—Ä—ã—Ç–æ): " DASHBOARD_PASSWORD
echo ""

log INFO "–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –∫–ª—é—á–∏..."
POSTGRES_PASSWORD=$(openssl rand -hex 16)
SUPABASE_DB_PASSWORD=$(openssl rand -hex 16)
JWT_SECRET=$(openssl rand -hex 32)
ANON_KEY=$(openssl rand -hex 32)
SERVICE_ROLE_KEY=$(openssl rand -hex 32)
SECRET_KEY_BASE=$(openssl rand -hex 64)
VAULT_ENC_KEY=$(openssl rand -hex 64)

SITE_URL="https://$DOMAIN"

log INFO "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∞–µ–º IPv4 –¥–ª—è apt..."
echo 'Acquire::ForceIPv4 "true";' > /etc/apt/apt.conf.d/99force-ipv4

log INFO "–û–±–Ω–æ–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º—É –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏..."
DEBIAN_FRONTEND=noninteractive apt update -y
DEBIAN_FRONTEND=noninteractive apt install -y curl git ca-certificates gnupg lsb-release docker.io docker-compose-plugin nginx certbot python3-certbot-nginx apache2-utils

log INFO "–í–∫–ª—é—á–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º Docker..."
systemctl enable docker --now

log INFO "–ö–ª–æ–Ω–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π Supabase (–∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º)..."
mkdir -p /opt/supabase
cd /opt/supabase
if [ -d supabase ]; then
  cd supabase
  git fetch --all
  git reset --hard origin/main
  cd ..
  log INFO "–û–±–Ω–æ–≤–∏–ª–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π Supabase"
else
  git clone https://github.com/supabase/supabase.git --depth=1
  log INFO "–ö–ª–æ–Ω–∏—Ä–æ–≤–∞–ª–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π Supabase"
fi

log INFO "–ö–æ–ø–∏—Ä—É–µ–º Docker –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
cp -r supabase/docker ./docker
cp docker/docker-compose.yml ./

log INFO "–°–æ–∑–¥–∞—ë–º .env —Å –∫–ª—é—á–∞–º–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏..."
cat > .env <<EOF
POSTGRES_PASSWORD=$POSTGRES_PASSWORD
SUPABASE_DB_PASSWORD=$SUPABASE_DB_PASSWORD
JWT_SECRET=$JWT_SECRET
ANON_KEY=$ANON_KEY
SERVICE_ROLE_KEY=$SERVICE_ROLE_KEY
SECRET_KEY_BASE=$SECRET_KEY_BASE
VAULT_ENC_KEY=$VAULT_ENC_KEY
DASHBOARD_USERNAME=$DASHBOARD_USERNAME
DASHBOARD_PASSWORD=$DASHBOARD_PASSWORD
SITE_URL=$SITE_URL
DOMAIN=$DOMAIN
POSTGRES_DB=postgres
POSTGRES_PORT=5432
POSTGRES_HOST=db
EOF

log INFO "–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º nginx –∏ Basic Auth..."
htpasswd -cb /etc/nginx/.htpasswd "$DASHBOARD_USERNAME" "$DASHBOARD_PASSWORD"

cat > /etc/nginx/sites-available/supabase <<EOF
server {
    listen 80;
    server_name $DOMAIN;

    location / {
        auth_basic "Restricted";
        auth_basic_user_file /etc/nginx/.htpasswd;
        proxy_pass http://localhost:54323;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
    }
}
EOF

ln -sf /etc/nginx/sites-available/supabase /etc/nginx/sites-enabled/supabase
nginx -t && systemctl reload nginx

log INFO "–ü–æ–ª—É—á–∞–µ–º SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —á–µ—Ä–µ–∑ certbot..."
if certbot --nginx -d "$DOMAIN" --non-interactive --agree-tos --email "$EMAIL"; then
  log SUCCESS "SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω"
else
  log WARN "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ–º–µ–Ω –∏ email)"
fi

log INFO "–ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã Supabase..."
docker compose --env-file .env -f docker-compose.yml up -d

log INFO "–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
for container in $(docker compose ps -q); do
  name=$(docker inspect --format='{{.Name}}' "$container" | cut -c2-)
  health=$(docker inspect --format='{{.State.Health.Status}}' "$container" 2>/dev/null || echo "no healthcheck")
  if [ "$health" != "no healthcheck" ]; then
    if [ "$health" != "healthy" ]; then
      log WARN "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä $name –Ω–µ –∑–¥–æ—Ä–æ–≤: $health"
    else
      log INFO "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä $name –∑–¥–æ—Ä–æ–≤"
    fi
  else
    log INFO "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä $name –±–µ–∑ healthcheck, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É"
  fi
done

STORAGE_CONTAINER=$(docker ps --filter "name=storage" --format "{{.Names}}" | head -n1)
if [ -z "$STORAGE_CONTAINER" ]; then
  S3_ACCESS_KEY="–Ω–µ –Ω–∞–π–¥–µ–Ω"
  S3_SECRET_KEY="–Ω–µ –Ω–∞–π–¥–µ–Ω"
else
  S3_ACCESS_KEY=$(docker exec "$STORAGE_CONTAINER" printenv MINIO_ACCESS_KEY || echo "–Ω–µ –Ω–∞–π–¥–µ–Ω")
  S3_SECRET_KEY=$(docker exec "$STORAGE_CONTAINER" printenv MINIO_SECRET_KEY || echo "–Ω–µ –Ω–∞–π–¥–µ–Ω")
fi

enable_ipv6

cat <<EOF

üöÄ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Supabase –∑–∞–≤–µ—Ä—à–µ–Ω–∞!

–î–æ—Å—Ç—É–ø—ã –∏ –≤–∞–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:

Studio URL:         $SITE_URL
API URL:            $SITE_URL
DB URL:             postgres://postgres:$POSTGRES_PASSWORD@localhost:5432/postgres

JWT_SECRET:         $JWT_SECRET
anon key:           $ANON_KEY
service_role key:   $SERVICE_ROLE_KEY

Studio login:       $DASHBOARD_USERNAME
Studio/nginx pass:  $DASHBOARD_PASSWORD

–î–æ–º–µ–Ω:              $DOMAIN

S3 Access Key:      $S3_ACCESS_KEY
S3 Secret Key:      $S3_SECRET_KEY

EOF
